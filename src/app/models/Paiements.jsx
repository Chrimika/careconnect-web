import { firestore } from "../firebase";
import { collection, getDocs, query, where, updateDoc, doc, getDoc, addDoc, serverTimestamp } from "firebase/firestore";

class Paiements {
  // M√©thode pour r√©cup√©rer toutes les transactions d'un auteur
  static async transactions_auteur(auteurId) {
    try {
        console.log("üîç R√©cup√©ration des transactions r√©ussies pour l'auteur :", auteurId);

        const ventesRef = collection(firestore, "ventes_direct");

        // R√©cup√©rer toutes les transactions de l'auteur qui ont l'√©tat "reussi"
        const qVentes = query(
            ventesRef,
            where("auteur", "==", auteurId),
            where("etat", "==", "reussi")
        );

        const ventesSnapshot = await getDocs(qVentes);
        console.log("üìä Nombre de transactions r√©ussies r√©cup√©r√©es :", ventesSnapshot.size);

        let transactions = [];

        ventesSnapshot.forEach((doc) => {
            const data = doc.data();
            console.log("üí∞ Transaction r√©ussie trouv√©e :", data);

            transactions.push({
                auteur: data.auteur,
                date: data.date,
                etat: data.etat,
                livre: data.livre,
                moyen: data.moyen,
                prix: data.prix,
                user: data.user,
            });
        });

        console.log("‚úÖ Transactions finales :", transactions);
        return transactions;
    } catch (error) {
        console.error("‚ùå Erreur lors de la r√©cup√©ration des transactions :", error);
        return [];
    }
}

  // M√©thode pour r√©cup√©rer le num√©ro Orange Money de l'auteur
  static async getOrangeMoneyNumber(auteurId) {
    try {
      console.log("R√©cup√©ration du num√©ro Orange Money pour l'auteur :", auteurId);
      
      const auteurRef = doc(firestore, "auteurs", auteurId);
      const auteurDoc = await getDoc(auteurRef);
      
      if (auteurDoc.exists()) {
        const orangeMoneyNumber = auteurDoc.data().orangeMoneyNumber || null;
        console.log("Num√©ro Orange Money r√©cup√©r√© :", orangeMoneyNumber);
        return orangeMoneyNumber;
      } else {
        console.log("Auteur non trouv√©");
        return null;
      }
    } catch (error) {
      console.error("Erreur lors de la r√©cup√©ration du num√©ro Orange Money :", error);
      return null;
    }
  }

  // M√©thode pour d√©finir le num√©ro Orange Money de l'auteur
  static async setOrangeMoneyNumber(auteurId, numero) {
    try {
      console.log("D√©finition du num√©ro Orange Money pour l'auteur :", auteurId, "avec le num√©ro :", numero);
      
      const auteurRef = doc(firestore, "auteurs", auteurId);
      await updateDoc(auteurRef, {
        orangeMoneyNumber: numero,
      });
      
      console.log("Num√©ro Orange Money d√©fini avec succ√®s");
    } catch (error) {
      console.error("Erreur lors de la d√©finition du num√©ro Orange Money :", error);
    }
  }

  // M√©thode pour r√©cup√©rer le num√©ro Mobile Money de l'auteur
  static async getMobileMoneyNumber(auteurId) {
    try {
      console.log("R√©cup√©ration du num√©ro Mobile Money pour l'auteur :", auteurId);
      
      const auteurRef = doc(firestore, "auteurs", auteurId);
      const auteurDoc = await getDoc(auteurRef);
      
      if (auteurDoc.exists()) {
        const mobileMoneyNumber = auteurDoc.data().mobileMoneyNumber || null;
        console.log("Num√©ro Mobile Money r√©cup√©r√© :", mobileMoneyNumber);
        return mobileMoneyNumber;
      } else {
        console.log("Auteur non trouv√©");
        return null;
      }
    } catch (error) {
      console.error("Erreur lors de la r√©cup√©ration du num√©ro Mobile Money :", error);
      return null;
    }
  }

  // M√©thode pour d√©finir le num√©ro Mobile Money de l'auteur
  static async setMobileMoneyNumber(auteurId, numero) {
    try {
      console.log("D√©finition du num√©ro Mobile Money pour l'auteur :", auteurId, "avec le num√©ro :", numero);
      
      const auteurRef = doc(firestore, "auteurs", auteurId);
      await updateDoc(auteurRef, {
        mobileMoneyNumber: numero,
      });
      
      console.log("Num√©ro Mobile Money d√©fini avec succ√®s");
    } catch (error) {
      console.error("Erreur lors de la d√©finition du num√©ro Mobile Money :", error);
    }
  }

  // M√©thode pour r√©cup√©rer le solde de l'auteur
  static async getSolde(auteurId) {
    try {
      console.log("R√©cup√©ration du solde pour l'auteur :", auteurId);
      
      const auteurRef = doc(firestore, "auteurs", auteurId);
      const auteurDoc = await getDoc(auteurRef);
      
      if (auteurDoc.exists()) {
        const solde = Number(auteurDoc.data().solde);
        console.log("nom :", auteurDoc.data().NomPrenom);
        console.log("Solde r√©cup√©r√© :", solde);
        return solde;
      } else {
        console.log("Auteur non trouv√©");
        return 0;
      }
    } catch (error) {
      console.error("Erreur lors de la r√©cup√©ration du solde :", error);
      return 0;
    }
  }

  // M√©thode pour mettre √† jour le solde de l'auteur
  static async setSolde(auteurId, nouveauSolde) {
    try {
      console.log("Mise √† jour du solde pour l'auteur :", auteurId, "avec la valeur :", nouveauSolde);
      
      const auteurRef = doc(firestore, "auteurs", auteurId);
      await updateDoc(auteurRef, {
        solde: nouveauSolde,
      });
      
      console.log("Solde mis √† jour avec succ√®s");
    } catch (error) {
      console.error("Erreur lors de la mise √† jour du solde :", error);
    }
  }

  // M√©thode pour r√©cup√©rer le seuil de paiement depuis la collection "global"
  static async getSeuil() {
    try {
      console.log("R√©cup√©ration du seuil de paiement depuis la collection 'global'");
      
      const globalRef = collection(firestore, "global");
      const globalSnapshot = await getDocs(globalRef);
      
      if (!globalSnapshot.empty) {
        // On suppose qu'il n'y a qu'un seul document dans la collection "global"
        const globalDoc = globalSnapshot.docs[0];
        const seuilAuteur = globalDoc.data().seuilAuteur || 0;
        console.log("Seuil de paiement r√©cup√©r√© :", seuilAuteur);
        return seuilAuteur;
      } else {
        console.log("Aucun document trouv√© dans la collection 'global'");
        return 0;
      }
    } catch (error) {
      console.error("Erreur lors de la r√©cup√©ration du seuil de paiement :", error);
      return 0;
    }
  }

  // M√©thode pour cr√©er un retrait
  static async creerRetrait(auteurId, montant) {
    try {
      console.log("Cr√©ation d'un retrait pour l'auteur :", auteurId, "avec le montant :", montant);
      
      const ventesRef = collection(firestore, "ventes_direct");
      
      // Cr√©er la transaction de retrait
      const nouvelleTransaction = {
        auteur: auteurId,
        prix: montant,
        type: "retrait",
        date: serverTimestamp(), // Date et heure actuelles
        etat: "reussi", // Par d√©faut, le retrait est r√©ussi
      };
      
      // Ajouter la transaction √† la collection "ventes_direct"
      await addDoc(ventesRef, nouvelleTransaction);
      
      console.log("Retrait cr√©√© avec succ√®s");
    } catch (error) {
      console.error("Erreur lors de la cr√©ation du retrait :", error);
    }
  }
}

export default Paiements;